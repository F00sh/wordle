{"file":"index-BI0d4RD6.js","mappings":"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","names":["_ssrRenderAttrs","_mergeProps","board","_ssrRenderList","_ssrInterpolate","_unref"],"sources":["../../../../components/WordleBoard.vue","../../../../components/WordleKeyboard.vue","../../../../data/words5.ts","../../../../composables/useWordle.ts","../../../../pages/index.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport type { RowResult } from '@/composables/useWordle'\n\ndefineProps<{ board: RowResult[]; currentRow: number }>()\n</script>\n\n<template>\n  <div class=\"grid grid-rows-5 gap-2 w-full max-w-xs sm:max-w-sm mx-auto\">\n    <div v-for=\"(row, rIdx) in board\" :key=\"rIdx\" class=\"grid grid-cols-5 gap-2\">\n      <div\n        v-for=\"(cell, cIdx) in row.letters\"\n        :key=\"cIdx\"\n        class=\"aspect-square flex items-center justify-center rounded select-none font-bold text-xl sm:text-2xl uppercase transition-colors duration-200 border border-gray-700\"\n        :class=\"{\n          'bg-tile text-white': cell.state === 'empty' || cell.state === 'tbd',\n          'bg-absent text-white': cell.state === 'absent',\n          'bg-present text-white': cell.state === 'present',\n          'bg-correct text-white': cell.state === 'correct',\n        }\"\n      >\n        {{ cell.letter }}\n      </div>\n    </div>\n  </div>\n</template>\n\n","<script setup lang=\"ts\">\nconst props = defineProps<{ keyState: Record<string, 'absent' | 'present' | 'correct'> }>()\nconst emit = defineEmits<{ (e: 'key', value: string): void }>()\n\nconst rows = [\n  'QWERTYUIOP'.split(''),\n  'ASDFGHJKL'.split(''),\n  ['ENTER', ...'ZXCVBNM'.split(''), '⌫']\n]\n\nfunction onPress(key: string) {\n  emit('key', key)\n}\n</script>\n\n<template>\n  <div class=\"w-full max-w-xl mx-auto mt-4 sm:mt-6 select-none\">\n    <div class=\"flex flex-col gap-2\">\n      <div v-for=\"(row, idx) in rows\" :key=\"idx\" class=\"flex gap-1 justify-center\">\n        <button\n          v-for=\"key in row\"\n          :key=\"key\"\n          class=\"px-2 sm:px-3 py-2 sm:py-3 rounded font-semibold text-xs sm:text-sm uppercase flex-1 basis-0\"\n          :class=\"[\n            key.length > 1 ? 'flex-[1.5]' : '',\n            props.keyState[key]?.toString() === 'correct' ? 'bg-correct text-white' :\n            props.keyState[key]?.toString() === 'present' ? 'bg-present text-white' :\n            props.keyState[key]?.toString() === 'absent' ? 'bg-absent text-white' : 'bg-tile text-gray-100',\n          ]\"\n          @click=\"onPress(key)\"\n        >\n          {{ key }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n","// A comprehensive, curated list of common 5-letter English words.\n// For gameplay and validation. All entries must be lowercase.\nexport const WORDS: string[] = [\n  'about','above','abuse','actor','acute','admit','adopt','adult','after','again','agent','agree','ahead','alarm','album','alert','alike','alive','allow','alone','along','aloud','alter','among','angel','anger','angle','angry','apart','apple','apply','arena','argue','arise','armed','array','arrow','aside','asset','audio','audit','avoid','award','aware','badly','baker','bases','basic','basis','beach','beard','beast','began','begin','begun','being','below','bench','billy','birth','black','blame','blind','block','blood','board','boost','booth','bound','brain','brand','bread','break','breed','brief','bring','broad','broke','brown','build','built','buyer','cable','calif','carry','catch','cause','chain','chair','chart','chase','cheap','check','cheek','chest','chief','child','china','chose','civic','civil','claim','class','clean','clear','click','clock','close','coach','coast','could','count','court','cover','craft','crash','cream','crime','cross','crowd','crown','curve','cycle','daily','dance','dated','dealt','death','debut','delay','depth','doing','doubt','dozen','draft','drama','drawn','dream','dress','drill','drink','drive','drove','dying','eager','early','earth','eight','elite','empty','enemy','enjoy','enter','entry','equal','error','event','every','exact','exist','extra','faith','false','fault','favor','fewer','fiber','field','fifth','fifty','fight','final','first','fixed','flash','fleet','floor','fluid','focus','force','forth','forty','forum','found','frame','fraud','fresh','front','fruit','fully','funny','giant','given','glass','globe','going','grace','grade','grand','grant','grass','great','green','gross','group','grown','guard','guess','guest','guide','happy','harry','heart','heavy','hence','henry','horse','hotel','house','human','ideal','image','index','inner','input','issue','japan','jimmy','joint','jones','judge','known','label','large','laser','later','laugh','layer','learn','lease','least','leave','legal','level','lever','light','limit','links','lives','local','logic','loose','lower','lucky','lunch','lying','magic','major','maker','march','maria','match','maybe','mayor','meant','media','metal','might','minor','minus','mixed','model','money','month','moral','motor','mount','mouse','mouth','movie','music','needs','never','newly','night','noise','north','novel','nurse','occur','ocean','offer','often','order','other','ought','paint','panel','paper','party','peace','peter','phase','phone','photo','piece','pilot','pitch','place','plain','plane','plant','plate','point','pound','power','press','price','pride','prime','print','prior','prize','proof','proud','prove','queen','quick','quiet','quite','radio','raise','range','rapid','ratio','reach','react','ready','refer','right','rival','river','roger','roman','rough','round','route','royal','rural','scale','scene','scope','score','sense','serve','seven','shall','shape','share','sharp','sheet','shelf','shell','shift','shirt','shock','shoot','short','shown','sight','since','sixth','sixty','sized','skill','sleep','slide','small','smart','smile','smith','smoke','solid','solve','sorry','sound','south','space','spare','speak','speed','spend','spent','split','spoke','sport','staff','stage','stake','stand','start','state','steam','steel','stick','still','stock','stone','stood','store','storm','story','strip','stuck','study','stuff','style','sugar','suite','super','sweet','table','taken','taste','taxes','teach','teeth','terry','texas','thank','theft','their','theme','there','these','thick','thing','think','third','those','three','threw','throw','tight','times','tired','title','today','topic','total','touch','tough','tower','track','trade','train','treat','trend','trial','tried','tries','truck','truly','trust','truth','twice','under','undue','union','unity','until','upper','upset','urban','usage','usual','valid','value','video','virus','visit','vital','voice','waste','watch','water','wheel','where','which','while','white','whole','whose','woman','women','world','worry','worse','worst','worth','would','wound','write','wrong','wrote','yield','young','youth'\n]\n\n// Helper: choose a random word based on provided list length\nexport function randomWord(): string {\n  const idx = Math.floor(Math.random() * WORDS.length)\n  return WORDS[idx]\n}\n\n","import { WORDS } from '@/data/words5'\n\nexport type LetterState = 'empty' | 'tbd' | 'absent' | 'present' | 'correct'\n\nexport interface Cell {\n  letter: string\n  state: LetterState\n}\n\nexport interface RowResult {\n  letters: Cell[]\n}\n\nexport interface WordleState {\n  board: RowResult[]\n  currentRow: number\n  currentCol: number\n  answer: string\n  keyboard: Record<string, Exclude<LetterState, 'empty' | 'tbd'>>\n  status: 'playing' | 'won' | 'lost'\n  message: string | null\n}\n\nconst ROWS = 5\nconst COLS = 5\n\nfunction pickRandomWord() {\n  const idx = Math.floor(Math.random() * WORDS.length)\n  return WORDS[idx].toUpperCase()\n}\n\nfunction evaluateGuess(guess: string, answer: string): LetterState[] {\n  const res: LetterState[] = Array(COLS).fill('absent')\n  const answerChars = answer.split('')\n  const guessChars = guess.split('')\n\n  const remaining: Record<string, number> = {}\n\n  // First pass: correct positions\n  for (let i = 0; i < COLS; i++) {\n    if (guessChars[i] === answerChars[i]) {\n      res[i] = 'correct'\n    } else {\n      const ch = answerChars[i]\n      remaining[ch] = (remaining[ch] || 0) + 1\n    }\n  }\n\n  // Second pass: present but misplaced\n  for (let i = 0; i < COLS; i++) {\n    if (res[i] === 'correct') continue\n    const ch = guessChars[i]\n    if (remaining[ch] > 0) {\n      res[i] = 'present'\n      remaining[ch]--\n    } else {\n      res[i] = 'absent'\n    }\n  }\n\n  return res\n}\n\nfunction upgradeStatus(prev: Exclude<LetterState, 'empty' | 'tbd'>, next: Exclude<LetterState, 'empty' | 'tbd'>) {\n  const rank: Record<string, number> = { absent: 0, present: 1, correct: 2 }\n  return rank[next] > rank[prev] ? next : prev\n}\n\nexport function useWordle() {\n  const state = reactive<WordleState>({\n    board: Array.from({ length: ROWS }, () => ({ letters: Array.from({ length: COLS }, () => ({ letter: '', state: 'empty' as LetterState })) })),\n    currentRow: 0,\n    currentCol: 0,\n    answer: pickRandomWord(),\n    keyboard: {},\n    status: 'playing',\n    message: null\n  })\n\n  const lettersOnly = (s: string) => s.replace(/[^A-Za-z]/g, '')\n\n  function inputLetter(ch: string) {\n    if (state.status !== 'playing') return\n    if (state.currentCol >= COLS) return\n    ch = lettersOnly(ch).toUpperCase()\n    if (!ch) return\n    const cell = state.board[state.currentRow].letters[state.currentCol]\n    cell.letter = ch\n    cell.state = 'tbd'\n    state.currentCol++\n  }\n\n  function backspace() {\n    if (state.status !== 'playing') return\n    if (state.currentCol === 0) return\n    state.currentCol--\n    const cell = state.board[state.currentRow].letters[state.currentCol]\n    cell.letter = ''\n    cell.state = 'empty'\n  }\n\n  function submit() {\n    if (state.status !== 'playing') return\n    if (state.currentCol < COLS) return toast('Not enough letters')\n    const guess = state.board[state.currentRow].letters.map(c => c.letter).join('')\n    if (!WORDS.includes(guess.toLowerCase())) {\n      return toast('Not in word list')\n    }\n\n    const evaluation = evaluateGuess(guess, state.answer)\n    for (let i = 0; i < COLS; i++) {\n      state.board[state.currentRow].letters[i].state = evaluation[i]\n      const ch = state.board[state.currentRow].letters[i].letter\n      const next = evaluation[i] as Exclude<LetterState, 'empty' | 'tbd'>\n      state.keyboard[ch] = state.keyboard[ch] ? upgradeStatus(state.keyboard[ch]!, next) : next\n    }\n\n    if (guess === state.answer) {\n      state.status = 'won'\n      return toast('Great! You guessed it!')\n    }\n\n    if (state.currentRow === ROWS - 1) {\n      state.status = 'lost'\n      return toast(`The word was ${state.answer}`)\n    }\n\n    state.currentRow++\n    state.currentCol = 0\n  }\n\n  function toast(msg: string) {\n    state.message = msg\n    setTimeout(() => {\n      if (state.message === msg) state.message = null\n    }, 1600)\n  }\n\n  function reset(randomize = true) {\n    state.board = Array.from({ length: ROWS }, () => ({ letters: Array.from({ length: COLS }, () => ({ letter: '', state: 'empty' as LetterState })) }))\n    state.currentRow = 0\n    state.currentCol = 0\n    state.answer = randomize ? pickRandomWord() : state.answer\n    state.keyboard = {}\n    state.status = 'playing'\n    state.message = null\n  }\n\n  function handleKeydown(e: KeyboardEvent) {\n    if (e.key === 'Enter') return submit()\n    if (e.key === 'Backspace') return backspace()\n    if (/^[a-zA-Z]$/.test(e.key)) return inputLetter(e.key)\n  }\n\n  onMounted(() => window.addEventListener('keydown', handleKeydown))\n  onBeforeUnmount(() => window.removeEventListener('keydown', handleKeydown))\n\n  return { state, inputLetter, backspace, submit, reset }\n}\n\n","<script setup lang=\"ts\">\nimport WordleBoard from '@/components/WordleBoard.vue'\nimport WordleKeyboard from '@/components/WordleKeyboard.vue'\nimport { useWordle } from '@/composables/useWordle'\n\nconst { state, inputLetter, backspace, submit, reset } = useWordle()\n\nfunction onKey(key: string) {\n  if (key === 'ENTER') return submit()\n  if (key === '⌫') return backspace()\n  inputLetter(key)\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col items-center px-4 pt-6 safe-bottom\">\n    <header class=\"w-full max-w-xl flex items-center justify-between mb-4\">\n      <h1 class=\"text-xl sm:text-2xl font-extrabold tracking-wide\">Wordle</h1>\n      <button class=\"text-sm bg-absent hover:bg-gray-600 px-3 py-1.5 rounded\" @click=\"reset()\">New</button>\n    </header>\n\n    <main class=\"w-full flex flex-col gap-4 items-center\">\n      <WordleBoard :board=\"state.board\" :current-row=\"state.currentRow\" />\n\n      <transition name=\"fade\">\n        <div v-if=\"state.message\" class=\"fixed top-4 left-1/2 -translate-x-1/2 bg-tile text-white px-4 py-2 rounded shadow\">\n          {{ state.message }}\n        </div>\n      </transition>\n\n      <div class=\"text-sm text-gray-300\" v-if=\"state.status !== 'playing'\">\n        <span v-if=\"state.status === 'won'\">You won! 🎉</span>\n        <span v-else>The word was <strong>{{ state.answer }}</strong>.</span>\n      </div>\n\n      <WordleKeyboard :key-state=\"state.keyboard\" @key=\"onKey\" />\n    </main>\n  </div>\n</template>\n\n<style scoped>\n.fade-enter-active, .fade-leave-active { transition: opacity .2s; }\n.fade-enter-from, .fade-leave-to { opacity: 0; }\n</style>\n\n"],"version":3}